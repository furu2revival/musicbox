// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file api/api_errors/api_errors.proto (package api.api_errors, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
	BinaryReadOptions,
	FieldList,
	JsonReadOptions,
	JsonValue,
	PartialMessage,
	PlainMessage,
} from "@bufbuild/protobuf";
import {
	EnumValueOptions,
	Message,
	proto3,
	protoInt64,
} from "@bufbuild/protobuf";
import { Code } from "../../google/rpc/code_pb.js";

/**
 * @generated from enum api.api_errors.ErrorHandlingType
 */
export enum ErrorHandlingType {
	/**
	 * @generated from enum value: ERROR_HANDLING_TYPE_UNSPECIFIED = 0;
	 */
	UNSPECIFIED = 0,

	/**
	 * サバクラ間の前提条件が満たされていない場合に発生する致命的なエラー。
	 * 緊急メンテナンスで修正しなければならない。
	 *
	 * @generated from enum value: ERROR_HANDLING_TYPE_FATAL = 1;
	 */
	FATAL = 1,

	/**
	 * サーバ側の一時的な不具合により発生したエラー。
	 * リトライすることにより解決する可能性がある。
	 *
	 * @generated from enum value: ERROR_HANDLING_TYPE_TEMPORARY = 2;
	 */
	TEMPORARY = 2,

	/**
	 * クライアント側の不具合により発生したエラー。
	 * 1つ前の画面に遷移したりタイトルに戻して前提条件を変えることにより、解決する可能性がある。
	 *
	 * @generated from enum value: ERROR_HANDLING_TYPE_RECOVERABLE = 3;
	 */
	RECOVERABLE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ErrorHandlingType)
proto3.util.setEnumType(ErrorHandlingType, "api.api_errors.ErrorHandlingType", [
	{ no: 0, name: "ERROR_HANDLING_TYPE_UNSPECIFIED" },
	{ no: 1, name: "ERROR_HANDLING_TYPE_FATAL" },
	{ no: 2, name: "ERROR_HANDLING_TYPE_TEMPORARY" },
	{ no: 3, name: "ERROR_HANDLING_TYPE_RECOVERABLE" },
]);

/**
 * @generated from enum api.api_errors.ErrorSeverity
 */
export enum ErrorSeverity {
	/**
	 * @generated from enum value: ERROR_SEVERITY_UNSPECIFIED = 0;
	 */
	UNSPECIFIED = 0,

	/**
	 * @generated from enum value: ERROR_SEVERITY_DEBUG = 1;
	 */
	DEBUG = 1,

	/**
	 * @generated from enum value: ERROR_SEVERITY_INFO = 2;
	 */
	INFO = 2,

	/**
	 * @generated from enum value: ERROR_SEVERITY_NOTICE = 3;
	 */
	NOTICE = 3,

	/**
	 * @generated from enum value: ERROR_SEVERITY_WARNING = 4;
	 */
	WARNING = 4,

	/**
	 * @generated from enum value: ERROR_SEVERITY_ERROR = 5;
	 */
	ERROR = 5,

	/**
	 * @generated from enum value: ERROR_SEVERITY_CRITICAL = 6;
	 */
	CRITICAL = 6,

	/**
	 * @generated from enum value: ERROR_SEVERITY_ALERT = 7;
	 */
	ALERT = 7,

	/**
	 * @generated from enum value: ERROR_SEVERITY_EMERGENCY = 8;
	 */
	EMERGENCY = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(ErrorSeverity)
proto3.util.setEnumType(ErrorSeverity, "api.api_errors.ErrorSeverity", [
	{ no: 0, name: "ERROR_SEVERITY_UNSPECIFIED" },
	{ no: 1, name: "ERROR_SEVERITY_DEBUG" },
	{ no: 2, name: "ERROR_SEVERITY_INFO" },
	{ no: 3, name: "ERROR_SEVERITY_NOTICE" },
	{ no: 4, name: "ERROR_SEVERITY_WARNING" },
	{ no: 5, name: "ERROR_SEVERITY_ERROR" },
	{ no: 6, name: "ERROR_SEVERITY_CRITICAL" },
	{ no: 7, name: "ERROR_SEVERITY_ALERT" },
	{ no: 8, name: "ERROR_SEVERITY_EMERGENCY" },
]);

/**
 * @generated from message api.api_errors.ErrorCode
 */
export class ErrorCode extends Message<ErrorCode> {
	constructor(data?: PartialMessage<ErrorCode>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "api.api_errors.ErrorCode";
	static readonly fields: FieldList = proto3.util.newFieldList(() => []);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>
	): ErrorCode {
		return new ErrorCode().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>
	): ErrorCode {
		return new ErrorCode().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>
	): ErrorCode {
		return new ErrorCode().fromJsonString(jsonString, options);
	}

	static equals(
		a: ErrorCode | PlainMessage<ErrorCode> | undefined,
		b: ErrorCode | PlainMessage<ErrorCode> | undefined
	): boolean {
		return proto3.util.equals(ErrorCode, a, b);
	}
}

/**
 * @generated from enum api.api_errors.ErrorCode.Common
 */
export enum ErrorCode_Common {
	/**
	 * @generated from enum value: COMMON_UNSPECIFIED = 0;
	 */
	UNSPECIFIED = 0,

	/**
	 * @generated from enum value: COMMON_UNKNOWN = 1000;
	 */
	UNKNOWN = 1000,

	/**
	 * @generated from enum value: COMMON_INVALID_SESSION = 1001;
	 */
	INVALID_SESSION = 1001,

	/**
	 * @generated from enum value: COMMON_INVALID_USER_AVAILABILITY = 1002;
	 */
	INVALID_USER_AVAILABILITY = 1002,
}
// Retrieve enum metadata with: proto3.getEnumType(ErrorCode_Common)
proto3.util.setEnumType(ErrorCode_Common, "api.api_errors.ErrorCode.Common", [
	{ no: 0, name: "COMMON_UNSPECIFIED" },
	{ no: 1000, name: "COMMON_UNKNOWN" },
	{ no: 1001, name: "COMMON_INVALID_SESSION" },
	{ no: 1002, name: "COMMON_INVALID_USER_AVAILABILITY" },
]);

/**
 * @generated from enum api.api_errors.ErrorCode.Method
 */
export enum ErrorCode_Method {
	/**
	 * @generated from enum value: METHOD_UNSPECIFIED = 0;
	 */
	UNSPECIFIED = 0,

	/**
	 * 入力値のバリデーションエラー。
	 * エラーを表示した後、アプリを終了させる。
	 *
	 * @generated from enum value: METHOD_ILLEGAL_ARGUMENT = 2000;
	 */
	ILLEGAL_ARGUMENT = 2000,

	/**
	 * 要求の操作を行うための前提条件を満たしていない。
	 * 前提となる状態に遷移し、ユーザに再操作を促す必要がある。
	 *
	 * @generated from enum value: METHOD_RESOURCE_NOT_FOUND = 2001;
	 */
	RESOURCE_NOT_FOUND = 2001,

	/**
	 * 要求の操作を行うための前提条件を満たしていない。
	 * 前提となる状態に遷移し、ユーザに再操作を促す必要がある。
	 *
	 * @generated from enum value: METHOD_RESOURCE_CONFLICT = 2002;
	 */
	RESOURCE_CONFLICT = 2002,

	/**
	 * 要求の操作を行うための前提条件を満たしていない。
	 * 前提となる状態に遷移し、ユーザに再操作を促す必要がある。
	 *
	 * @generated from enum value: METHOD_RESOURCE_INSUFFICIENT = 2003;
	 */
	RESOURCE_INSUFFICIENT = 2003,
}
// Retrieve enum metadata with: proto3.getEnumType(ErrorCode_Method)
proto3.util.setEnumType(ErrorCode_Method, "api.api_errors.ErrorCode.Method", [
	{ no: 0, name: "METHOD_UNSPECIFIED" },
	{ no: 2000, name: "METHOD_ILLEGAL_ARGUMENT" },
	{ no: 2001, name: "METHOD_RESOURCE_NOT_FOUND" },
	{ no: 2002, name: "METHOD_RESOURCE_CONFLICT" },
	{ no: 2003, name: "METHOD_RESOURCE_INSUFFICIENT" },
]);

/**
 * @generated from message api.api_errors.ErrorDetail
 */
export class ErrorDetail extends Message<ErrorDetail> {
	/**
	 * @generated from field: int64 error_code = 1;
	 */
	errorCode = protoInt64.zero;

	/**
	 * @generated from field: api.api_errors.ErrorHandlingType error_handling_type = 2;
	 */
	errorHandlingType = ErrorHandlingType.UNSPECIFIED;

	constructor(data?: PartialMessage<ErrorDetail>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "api.api_errors.ErrorDetail";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "error_code", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
		{
			no: 2,
			name: "error_handling_type",
			kind: "enum",
			T: proto3.getEnumType(ErrorHandlingType),
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>
	): ErrorDetail {
		return new ErrorDetail().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>
	): ErrorDetail {
		return new ErrorDetail().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>
	): ErrorDetail {
		return new ErrorDetail().fromJsonString(jsonString, options);
	}

	static equals(
		a: ErrorDetail | PlainMessage<ErrorDetail> | undefined,
		b: ErrorDetail | PlainMessage<ErrorDetail> | undefined
	): boolean {
		return proto3.util.equals(ErrorDetail, a, b);
	}
}

/**
 * @generated from extension: optional google.rpc.Code grpc_code = 50100;
 */
export const grpc_code = proto3.makeExtension<EnumValueOptions, Code>(
	"api.api_errors.grpc_code",
	EnumValueOptions,
	() => ({ no: 50100, kind: "enum", T: proto3.getEnumType(Code), opt: true })
);

/**
 * @generated from extension: optional api.api_errors.ErrorHandlingType error_handling_type = 50101;
 */
export const error_handling_type = proto3.makeExtension<
	EnumValueOptions,
	ErrorHandlingType
>("api.api_errors.error_handling_type", EnumValueOptions, () => ({
	no: 50101,
	kind: "enum",
	T: proto3.getEnumType(ErrorHandlingType),
	opt: true,
}));
