// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file api/music_sheet.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
	BinaryReadOptions,
	FieldList,
	JsonReadOptions,
	JsonValue,
	PartialMessage,
	PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 音階を表します。
 *
 * @generated from enum api.Pitch
 */
export enum Pitch {
	/**
	 * @generated from enum value: PITCH_UNSPECIFIED = 0;
	 */
	UNSPECIFIED = 0,

	/**
	 * @generated from enum value: PITCH_C3 = 1;
	 */
	C3 = 1,

	/**
	 * @generated from enum value: PITCH_D3 = 2;
	 */
	D3 = 2,

	/**
	 * @generated from enum value: PITCH_E3 = 3;
	 */
	E3 = 3,

	/**
	 * @generated from enum value: PITCH_F3 = 4;
	 */
	F3 = 4,

	/**
	 * @generated from enum value: PITCH_G3 = 5;
	 */
	G3 = 5,

	/**
	 * @generated from enum value: PITCH_A4 = 6;
	 */
	A4 = 6,

	/**
	 * @generated from enum value: PITCH_B4 = 7;
	 */
	B4 = 7,

	/**
	 * @generated from enum value: PITCH_C4 = 8;
	 */
	C4 = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(Pitch)
proto3.util.setEnumType(Pitch, "api.Pitch", [
	{ no: 0, name: "PITCH_UNSPECIFIED" },
	{ no: 1, name: "PITCH_C3" },
	{ no: 2, name: "PITCH_D3" },
	{ no: 3, name: "PITCH_E3" },
	{ no: 4, name: "PITCH_F3" },
	{ no: 5, name: "PITCH_G3" },
	{ no: 6, name: "PITCH_A4" },
	{ no: 7, name: "PITCH_B4" },
	{ no: 8, name: "PITCH_C4" },
]);

/**
 * @generated from message api.MusicSheetServiceGetV1Request
 */
export class MusicSheetServiceGetV1Request extends Message<MusicSheetServiceGetV1Request> {
	/**
	 * @generated from field: string music_sheet_id = 1;
	 */
	musicSheetId = "";

	constructor(data?: PartialMessage<MusicSheetServiceGetV1Request>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "api.MusicSheetServiceGetV1Request";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{
			no: 1,
			name: "music_sheet_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>
	): MusicSheetServiceGetV1Request {
		return new MusicSheetServiceGetV1Request().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>
	): MusicSheetServiceGetV1Request {
		return new MusicSheetServiceGetV1Request().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>
	): MusicSheetServiceGetV1Request {
		return new MusicSheetServiceGetV1Request().fromJsonString(
			jsonString,
			options
		);
	}

	static equals(
		a:
			| MusicSheetServiceGetV1Request
			| PlainMessage<MusicSheetServiceGetV1Request>
			| undefined,
		b:
			| MusicSheetServiceGetV1Request
			| PlainMessage<MusicSheetServiceGetV1Request>
			| undefined
	): boolean {
		return proto3.util.equals(MusicSheetServiceGetV1Request, a, b);
	}
}

/**
 * @generated from message api.MusicSheetServiceGetV1Response
 */
export class MusicSheetServiceGetV1Response extends Message<MusicSheetServiceGetV1Response> {
	/**
	 * @generated from field: api.MusicSheet music_sheet = 1;
	 */
	musicSheet?: MusicSheet;

	constructor(data?: PartialMessage<MusicSheetServiceGetV1Response>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "api.MusicSheetServiceGetV1Response";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "music_sheet", kind: "message", T: MusicSheet },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>
	): MusicSheetServiceGetV1Response {
		return new MusicSheetServiceGetV1Response().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>
	): MusicSheetServiceGetV1Response {
		return new MusicSheetServiceGetV1Response().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>
	): MusicSheetServiceGetV1Response {
		return new MusicSheetServiceGetV1Response().fromJsonString(
			jsonString,
			options
		);
	}

	static equals(
		a:
			| MusicSheetServiceGetV1Response
			| PlainMessage<MusicSheetServiceGetV1Response>
			| undefined,
		b:
			| MusicSheetServiceGetV1Response
			| PlainMessage<MusicSheetServiceGetV1Response>
			| undefined
	): boolean {
		return proto3.util.equals(MusicSheetServiceGetV1Response, a, b);
	}
}

/**
 * @generated from message api.MusicSheetServiceCreateV1Request
 */
export class MusicSheetServiceCreateV1Request extends Message<MusicSheetServiceCreateV1Request> {
	/**
	 * @generated from field: string title = 1;
	 */
	title = "";

	/**
	 * @generated from field: repeated api.Note notes = 2;
	 */
	notes: Note[] = [];

	constructor(data?: PartialMessage<MusicSheetServiceCreateV1Request>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "api.MusicSheetServiceCreateV1Request";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{ no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 2, name: "notes", kind: "message", T: Note, repeated: true },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>
	): MusicSheetServiceCreateV1Request {
		return new MusicSheetServiceCreateV1Request().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>
	): MusicSheetServiceCreateV1Request {
		return new MusicSheetServiceCreateV1Request().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>
	): MusicSheetServiceCreateV1Request {
		return new MusicSheetServiceCreateV1Request().fromJsonString(
			jsonString,
			options
		);
	}

	static equals(
		a:
			| MusicSheetServiceCreateV1Request
			| PlainMessage<MusicSheetServiceCreateV1Request>
			| undefined,
		b:
			| MusicSheetServiceCreateV1Request
			| PlainMessage<MusicSheetServiceCreateV1Request>
			| undefined
	): boolean {
		return proto3.util.equals(MusicSheetServiceCreateV1Request, a, b);
	}
}

/**
 * @generated from message api.MusicSheetServiceCreateV1Response
 */
export class MusicSheetServiceCreateV1Response extends Message<MusicSheetServiceCreateV1Response> {
	/**
	 * @generated from field: string music_sheet_id = 1;
	 */
	musicSheetId = "";

	constructor(data?: PartialMessage<MusicSheetServiceCreateV1Response>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "api.MusicSheetServiceCreateV1Response";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{
			no: 1,
			name: "music_sheet_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>
	): MusicSheetServiceCreateV1Response {
		return new MusicSheetServiceCreateV1Response().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>
	): MusicSheetServiceCreateV1Response {
		return new MusicSheetServiceCreateV1Response().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>
	): MusicSheetServiceCreateV1Response {
		return new MusicSheetServiceCreateV1Response().fromJsonString(
			jsonString,
			options
		);
	}

	static equals(
		a:
			| MusicSheetServiceCreateV1Response
			| PlainMessage<MusicSheetServiceCreateV1Response>
			| undefined,
		b:
			| MusicSheetServiceCreateV1Response
			| PlainMessage<MusicSheetServiceCreateV1Response>
			| undefined
	): boolean {
		return proto3.util.equals(MusicSheetServiceCreateV1Response, a, b);
	}
}

/**
 * 楽譜を表します。
 *
 * @generated from message api.MusicSheet
 */
export class MusicSheet extends Message<MusicSheet> {
	/**
	 * @generated from field: string music_sheet_id = 1;
	 */
	musicSheetId = "";

	/**
	 * @generated from field: string title = 2;
	 */
	title = "";

	/**
	 * @generated from field: repeated api.Note notes = 3;
	 */
	notes: Note[] = [];

	constructor(data?: PartialMessage<MusicSheet>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "api.MusicSheet";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{
			no: 1,
			name: "music_sheet_id",
			kind: "scalar",
			T: 9 /* ScalarType.STRING */,
		},
		{ no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
		{ no: 3, name: "notes", kind: "message", T: Note, repeated: true },
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>
	): MusicSheet {
		return new MusicSheet().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>
	): MusicSheet {
		return new MusicSheet().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>
	): MusicSheet {
		return new MusicSheet().fromJsonString(jsonString, options);
	}

	static equals(
		a: MusicSheet | PlainMessage<MusicSheet> | undefined,
		b: MusicSheet | PlainMessage<MusicSheet> | undefined
	): boolean {
		return proto3.util.equals(MusicSheet, a, b);
	}
}

/**
 * 音符を表します。
 * ここでは 16 分音符のみを扱います。
 *
 * @generated from message api.Note
 */
export class Note extends Message<Note> {
	/**
	 * @generated from field: repeated api.Pitch pitches = 1;
	 */
	pitches: Pitch[] = [];

	constructor(data?: PartialMessage<Note>) {
		super();
		proto3.util.initPartial(data, this);
	}

	static readonly runtime: typeof proto3 = proto3;
	static readonly typeName = "api.Note";
	static readonly fields: FieldList = proto3.util.newFieldList(() => [
		{
			no: 1,
			name: "pitches",
			kind: "enum",
			T: proto3.getEnumType(Pitch),
			repeated: true,
		},
	]);

	static fromBinary(
		bytes: Uint8Array,
		options?: Partial<BinaryReadOptions>
	): Note {
		return new Note().fromBinary(bytes, options);
	}

	static fromJson(
		jsonValue: JsonValue,
		options?: Partial<JsonReadOptions>
	): Note {
		return new Note().fromJson(jsonValue, options);
	}

	static fromJsonString(
		jsonString: string,
		options?: Partial<JsonReadOptions>
	): Note {
		return new Note().fromJsonString(jsonString, options);
	}

	static equals(
		a: Note | PlainMessage<Note> | undefined,
		b: Note | PlainMessage<Note> | undefined
	): boolean {
		return proto3.util.equals(Note, a, b);
	}
}
