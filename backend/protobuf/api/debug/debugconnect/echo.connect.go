// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/debug/echo.proto

package debugconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	debug "github.com/furu2revival/musicbox/protobuf/api/debug"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EchoServiceName is the fully-qualified name of the EchoService service.
	EchoServiceName = "api.debug.EchoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EchoServiceEchoV1Procedure is the fully-qualified name of the EchoService's EchoV1 RPC.
	EchoServiceEchoV1Procedure = "/api.debug.EchoService/EchoV1"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	echoServiceServiceDescriptor      = debug.File_api_debug_echo_proto.Services().ByName("EchoService")
	echoServiceEchoV1MethodDescriptor = echoServiceServiceDescriptor.Methods().ByName("EchoV1")
)

// EchoServiceClient is a client for the api.debug.EchoService service.
type EchoServiceClient interface {
	EchoV1(context.Context, *connect.Request[debug.EchoServiceEchoV1Request]) (*connect.Response[debug.EchoServiceEchoV1Response], error)
}

// NewEchoServiceClient constructs a client for the api.debug.EchoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEchoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EchoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &echoServiceClient{
		echoV1: connect.NewClient[debug.EchoServiceEchoV1Request, debug.EchoServiceEchoV1Response](
			httpClient,
			baseURL+EchoServiceEchoV1Procedure,
			connect.WithSchema(echoServiceEchoV1MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// echoServiceClient implements EchoServiceClient.
type echoServiceClient struct {
	echoV1 *connect.Client[debug.EchoServiceEchoV1Request, debug.EchoServiceEchoV1Response]
}

// EchoV1 calls api.debug.EchoService.EchoV1.
func (c *echoServiceClient) EchoV1(ctx context.Context, req *connect.Request[debug.EchoServiceEchoV1Request]) (*connect.Response[debug.EchoServiceEchoV1Response], error) {
	return c.echoV1.CallUnary(ctx, req)
}

// EchoServiceHandler is an implementation of the api.debug.EchoService service.
type EchoServiceHandler interface {
	EchoV1(context.Context, *connect.Request[debug.EchoServiceEchoV1Request]) (*connect.Response[debug.EchoServiceEchoV1Response], error)
}

// NewEchoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEchoServiceHandler(svc EchoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	echoServiceEchoV1Handler := connect.NewUnaryHandler(
		EchoServiceEchoV1Procedure,
		svc.EchoV1,
		connect.WithSchema(echoServiceEchoV1MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.debug.EchoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EchoServiceEchoV1Procedure:
			echoServiceEchoV1Handler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEchoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEchoServiceHandler struct{}

func (UnimplementedEchoServiceHandler) EchoV1(context.Context, *connect.Request[debug.EchoServiceEchoV1Request]) (*connect.Response[debug.EchoServiceEchoV1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.debug.EchoService.EchoV1 is not implemented"))
}
